h1. ActivityManager

|| Method|| Param || Return || Description ||
|*saveActivity*(Identity owner, ExoSocialActivity activity) throws ActivityStorageException |{{owner }} - the owner of activity stream, {{activity}} -  the activity which needs to be saved |ExoSocialActivity  | Saves an activity to the stream of an owner.Note that the Activity.userId will be set to the owner's identity if it has not already set.|
|*getActivity*(String activityId) throws ActivityStorageException |{{activityId}} - the id of activity|{{ExoSocialActivity }} | Gets an activity by its Id.|
|*deleteActivity*(String activityId) throws ActivityStorageException |{{activityId}} - the id of activity |void |Deletes an activity by its id. |
|*deleteActivity*(ExoSocialActivity activity) throws ActivityStorageException |{{activity}} | void |Deletes a stored activity ({{{id !}}}= null). (Since 1.1.1).|
|*deleteComment*(String activityId, String commentId) throws ActivityStorageException |{{activityId}} - the id of activity, {{commentId}} - the id of comment| void | Deletes a comment by its id.|
|*getActivities*(Identity identity) throws ActivityStorageException|{{identity}} |List<ExoSocialActivity>  |Gets the latest activities by an identity with the default limit of 20 latest activities.|
|*getActivities*(Identity identity, long start, long limit) throws ActivityStorageException |{{identity}}, {{start }}, {{limit}}  | List<ExoSocialActivity> |Gets the latest activities by an identity, specifying *start* that is an offset index and *limit*. |
|*getActivitiesOfConnections*(Identity ownerIdentity) throws ActivityStorageException | {{ownerIdentity}} |List<ExoSocialActivity> |Gets activities of connections from an identity. The activities are sorted by time. Though by using cache, this still can be considered as the cause of the biggest performance problem. (Since 1.1.1).|
|*getActivitiesOfUserSpaces*(Identity ownerIdentity)| {{ownerIdentity}} |List<ExoSocialActivity> |Gets the activities from all spaces of a user. By default, the activity list is composed of all spaces' activities. Each activity list of the space contains maximum 20 activities and are sorted by time. (Since 1.1.1).|
|*getActivityFeed*(Identity identity) throws ActivityStorageException | {{identity}} |List<ExoSocialActivity> |Gets the activity feed of an identity. This feed is the combination of all the activities of his own activities, his connections' activities and his spaces' activities which are sorted by time. The latest activity is the first item in the activity list. (Since  1.1.2).|
|*saveActivity*(ExoSocialActivity activity) throws ActivityStorageException | {{ activity}} - the activity to save|ExoSocialActivity |Saves an activity into the stream for the activity's userId. The userId must be set and this field is used to indicate the owner stream.|
|*saveComment*(ExoSocialActivity activity, ExoSocialActivity comment) throws ActivityStorageException | {{activity, comment}} |void |Saves a new comment or updates an existing comment that is an instance of activity with mandatory fields: userId, title.|
|*saveLike*(ExoSocialActivity activity, Identity identity) throws ActivityStorageException | {{activity, identity }} |void|Saves an identity who likes an activity.|
|*removeLike*(ExoSocialActivity activity, Identity identity) throws ActivityStorageException | {{ activity}}, {{identity}} - a user who dislikes an activity |void|Removes an indentity who likes an activity, if this activity is liked, it will be removed.|
|*getComments*(ExoSocialActivity activity) throws ActivityStorageException | {{activity}} |List<ExoSocialActivity>| Gets the comment list of an activity.||
|*recordActivity*(Identity owner, String type, String title) throws ActivityStorageException | {{owner, type, title }} |ExoSocialActivity |Records an activity. (Since 1.2.0-GA).|
|*recordActivity*(Identity owner, ExoSocialActivity activity) throws Exception | {{owner, activity,  }} |ExoSocialActivity |Saves an activity. Deprecated - use saveActivity(Identity, Activity) instead. It Will be removed by 1.3.x|
|*recordActivity*(Identity owner, String type, String title, String body) throws ActivityStorageException | {{ owner}} - the owner of the target stream for this activity, {{type}} - the type of an activity which will be used to render a custom ui, {{title}} - the title, {{body}} - the body |ExoSocialActivity |Records an activity.|
|*addProcessor*(ActivityProcessor processor) | {{processor }} |void|Adds a new processor.|
|*addProcessorPlugin*(BaseActivityProcessorPlugin plugin) | {{plugin}} |void|Adds a new processor plugin.|
|*getActivitiesCount*(Identity owner) throws ActivityStorageException | {{owner }} | int|Gets the number of activities from a stream owner.|
|*processActivitiy*(ExoSocialActivity activity) | {{activity}} |void|Passes an activity through the chain of processors.|

h1. IdentityManager

|| Function || Param || Return || Description ||
| *getIdentity*(java.lang.String id) | {{id}} can be a social GlobalId or a raw identity such as in Identity.getId() | null if nothing is found, or the Identity object | To get the identity by id and to load his profile. |
| *getIdentity*(java.lang.String id, boolean loadProfile) | {{id}} can be a social GlobalId or a raw identity such as in Identity.getId(); {{loadProfile}} - the value is true if the profile is loaded and false if not loaded | null if nothing is found, or the Identity object | To get the identity by loading id of the profile optionally. |
| *addIdentityProvider*(IdentityProvider<?> idProvider)| {{idProvider}} is the id of provider |  | To add the id of provider. |
| *getOrCreateIdentity*(java.lang.String providerId, java.lang.String remoteId) | {{providerId}} is the id of provider; {{remoteId}} is the remote id | identity | To get the identity by remoteId. If the provider can not find any identity by remoteId, the return value is null. If no identity found by identity provider and that identity is still stored on JCR, that stored identity will be deleted and the return value is null.|
| *getIdentitiesByProfileFilter*(java.lang.String providerId, ProfileFilter profileFilter) | {{providerId}} is the id of provider; {{profileFilter}} is the filter of provider | the identities by the profile filter | To get the identities by profile filter. |
| *getIdentitiesByProfileFilter*(java.lang.String providerId, ProfileFilter profileFilter, long offset, long limit) |  |  |  |
| *getIdentitiesByProfileFilter*(ProfileFilter profileFilter) | {{profileFilter}} - the profile filter | the identities by profile filter | To get the identities by profile filter. |
| *getIdentitiesByProfileFilter*(ProfileFilter profileFilter, long offset, long limit) |  |  |  |
| *getIdentitiesFilterByAlphaBet*(java.lang.String providerId, ProfileFilter profileFilter) | {{providerId}} is the id of provider; {{profileFilter}} is the profile filter | the identities filter by alphabet | To get the identities filter by alpha bet. |
| *getIdentitiesFilterByAlphaBet*(ProfileFilter profileFilter) | {{profileFilter}} - the profile filter | the identities filter by alphabet | To get the identities filter by alphabet. |
| *getOrCreateIdentity*(java.lang.String providerId, java.lang.String remoteId, boolean loadProfile) | {{providerId}} - referring to the name of the Identity provider; {{remoteId}} - the identifier that identify the identity in the specific identity provider; {{loadProfile}} is true when the profile is loaded | null if nothing is found, or the Identity object TODO improves the performance by specifying what needs to be loaded | This function returns an Identity object that is specific to a special type. For example, if the type is Linked'In, the identifier will be the URL of profile or if it is a CS contact manager contact, it will be the UID of the contact. A new identity is created if it doesnot exist. |
| *getIdentity*(java.lang.String providerId, java.lang.String remoteId, boolean loadProfile) | {{providerId}}; {{remoteId}}; {{loadProfile}} |  | To get the identity. |
| *identityExisted*(java.lang.String providerId, java.lang.String remoteId) | {{providerId}}; {{remoteId}} |  | To check if the identity has existed or not. |
| *saveIdentity*(Identity identity) | {{identity}} is the identity |  | To save the identity. |
| *updateAvatar*(Profile p) |  |  |  |
| *updateBasicInfo*(Profile p) |  |  |  |
| *updateContactSection*(Profile p) |  |  |  |
| *updateExperienceSection*(Profile p) |  |  |  |
| *updateHeaderSection*(Profile p) |  |  |  |
| *getIdentities*(java.lang.String providerId) | {{providerId}} is the id of provider | identities | To get the identity. |
| *getIdentities*(java.lang.String providerId, boolean loadProfile) | {{providerId}} is the id of provider; {{loadProfile}} is the loaded profile. |identities | To get the identities. |
| *getStorage*() |  |  | the storage | To get the storage. |
| *setIdentityStorage*(IdentityStorage identityStorage)registerProfileListener |  |  |  |
| *registerProfileListener*(ProfileListener listener)unregisterProfileListener |  |  |  |
| *unregisterProfileListener*(ProfileListener listener)addProfileListener |  |  |  |
| *addProfileListener*(ProfileListenerPlugin plugin) | {{plugin}} |  | To register a profile listener component plug-in. |
| *getIdentityStorage*() |  |  |  |
| *getConnections*(Identity ownerIdentity)| {{ownerIdentity}} | List<Identity> | Gets connections of an identity |


h1. Relationship Manager

|| Function || Param || Return || Description ||
| *getRelationship*(String relationshipId)| {{relationshipId}} | Relationship | Gets relationship the by id. |
| *invite*(Identity sender, Identity receiver)| {{sender}} {{receiver}} | Relationship | Creates a connection invitation between 2 identities. |
| *saveRelationship*(Relationship relationship)| {{relationship}}  is a relationship |  | Saves a relationship. |
| *confirm*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Confirms a relationship. |
| *deny*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Denies a relationship. |
| *remove*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Removes a relationship. |
| *ignore*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Ignores a relationship. |
| *getPendingRelationships*(Identity sender)| {{sender}}  is a identity | List<Relationship> | Gets all the pending relationship of sender. |
| *getPendingRelationships*(Identity sender, List<Identity> identities)| {{sender}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets pending relationships of sender that match with identities. |
| *getRequireValidationRelationships*(Identity receiver)| {{receiver}}  is a identity | List<Relationship> | Gets list of required validation relationship of receiver. |
| *getRequireValidationRelationships*(Identity receiver, List<Identity> identities)| {{receiver}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets list of required validation relationship of receiver that match with identities. |
| *getConfirmedRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Gets list of confirmed relationship of identity. |
| *getConfirmedRelationships*(Identity identity, List<Identity> identities)| {{identity}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets list of confirmed relationship of identity that match with identities. |
| *getAllRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Returns all the relationship of a given identity with other identity. |
| *getAllRelationships*(Identity identity, List<Identity> identities)| {{identity}} is a identity, {{identities}} is a list of identity | List<Relationship> | Returns all the relationship of a given identity with other identity in identities. |
| *getAllRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Returns all the relationship of a given identity with other identity. || *getAllRelationships*(Identity identity, Relationship.Type type, List<Identity> identities)| {{identity}} is a identity, {{type}} is a Relationship.Type {{identities}} is a list of identity | List<Relationship> | Returns all the  relationship of a given identity with other identity in identities in type. |
| *getRelationship*(Identity identity1, Identity identity2)| {{identity1}} and {{identity2}} is identities| Relationship | Gets the relationship of 2 identity. |

h1. SpaceService

|| Method || Param || Return || Description ||
|*getAllSpaces*() throws SpaceException|{{N/A}}|List<Space> - list of spaces in Social|Gets all spaces in Social.|
|*getSpaceByDisplayName*(String spaceDisplayName) throws SpaceException|{{spaceDisplayName}}|Space|Gets a space by its display name. (Since 1.2.0-GA).|
|*getSpaceByName*(String spaceName) throws SpaceException|{{spaceName}}|Space|Gets a space by its name.|
|*getSpacesByFirstCharacterOfName*(String firstCharacterOfName) throws SpaceException|{{firstCharacterOfName}}|  List<Space> - all spaces which have first character of name matched the input string.|Gets all spaces has the name starting with the input character.|
|*getSpacesBySearchCondition*(String condition) throws Exception|{{condition - the input condition}}| List<Space> - a list of spaces|Gets all spaces which has the name or the description that matches the input condition.|
|*getSpaceById*(String spaceId) throws SpaceException|{{spaceId- Id of that space}}|Space - space with the id specified|Gets a space by its id.|
|*getSpaceByUrl*(String spaceUrl) throws SpaceException|{{spaceUrl - url of space}}|Space - the space with string url specified|Gets a space by its url.|
|*getSpaces*(String userId) throws SpaceException|{{userId - Id of the user}}| List<Space> - all spaces of a user in which the user is a member|Gets spaces of a user in which that user is a member.|
|*getAccessibleSpaces*(String userId) throws SpaceException|{{userId}}| List<Space> - list of spaces|Gets spaces of a user which that user has the access permission|
|*getEditableSpaces*(String userId) throws SpaceException|{{userId}}| List<Space> - list of space|Gets spaces of a user which that user has the edit permission.|
|*getInvitedSpaces*(String userId) throws SpaceException|{{userId}}|  List<Space> - spaces list of all user's invited spaces|Gets a user's invited spaces and that user can accept or deny the request.|
|*getPublicSpaces*(String userId) throws SpaceException|{{userId - Id of user}}|List<Space> - spaces list in which the user can request to join|Gets a user's public spaces and that user can request to join.|
|*getPendingSpaces*(String userId) throws SpaceException|{{userId}}|  List<Space> -  spaces list in which the user can revoke that request|Gets a user's pending spaces and that the user can revoke that request.|
|*createSpace*(Space space, String creator) throws SpaceException|{{space, creator}}|Space - the created space|Creates a new space by creating a new group.This new group will be under */Spaces* node.This is shorthand for calling createSpace(space, creator, null).|
|*createSpace*(Space space, String creator, String groupId) throws SpaceException|{{space, creator,  groupId - if groupId == null: create a new space by creating a new group}}|space|Creates a new space from an existing group.|
|*saveSpace*(Space space, boolean isNew) throws SpaceException|{{space - space is saved,  isNew - true if creating a new space; otherwise, update an existing space.}}|void|Saves a new space or updates a space.|
|*deleteSpace*(Space space) throws SpaceException|{{space - the space is deleted}}|void|Deletes a space. When deleting a space, all of its page navigations and its group will be deleted.|
|*deleteSpace*(String spaceId) throws SpaceException|{{ spaceId}}|void|Deletes a space by its id.|
|*initApp*(Space space) throws SpaceException|{{space}}|void|Initializes default applications in a space. Deprecated, use *initApps*(Space) instead.|
|*initApps*(Space space) throws SpaceException|{{space}}|void|Initializes default applications in a space. Set *space.homeNodeApp* from the configuration file to be the root page of that space node. When removing a space, make sure to call *deInitApps*(Space) and then deleteSpace(Space) or *deleteSpace*(String)|
|*deInitApps*(Space space) throws SpaceException|{{space }}| void |De-initializes the applications of a space.Make sure to call this method before *deleteSpace*(Space) or *deleteSpace*(String). Otherwise, the space is deleted but its pages and navigation still exists.|
|*addMember*(Space space, String userId) throws SpaceException|{{}}|void|Adds a user to a space, the user will get the "member" role in a space|
|*addMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|void|Adds a user to a space, the user will get the "member" role in a space|
|*removeMember*(Space space, String userId) throws SpaceException|{{space, userId}}|void|Removes a member from a space. If the member is the only leader of that space, the member removed is not allowed and throws *SpaceException* with Code = USER_ONLY_LEADER.|
|*removeMember*?(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|void|Removes a member from a space.|
|*getMembers*(Space space) throws SpaceException|{{space}}| List<String> - a list of the space members|Gets a list of the space members from a space.|
|*getMembers*(String spaceId) throws SpaceException|{{spaceId}}| List<String> - a list of the space members| Gets a list of the space members from a space.|
|*setLeader*(Space space, String userId, boolean isLeader) throws SpaceException|{{space, userId, isLeader }}|void|Sets a member of a space as a manager.|
|*setLeader*(String spaceId, String userId, boolean isLeader) throws SpaceException|{{spaceId, userId, isLeader}}|void|Sets a member of a space as a manager.|
|*isLeader*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean - true if that the user is a leader; otherwise, false|Checks whether a user is a space's leader or not.|
|*isLeader*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean - true if that user is a leader; otherwise, false|Checks whether a user is a space's leader or not.|
|*isOnlyLeader*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean - true if that user is the only leader of the space; otherwise, false|Checks whether a user is the only leader of a space or not.|
|*isOnlyLeader*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean|Checks whether a user is the only leader of a space or not.|
|*isMember*(Space space, String userId) throws SpaceException|{{space, userId}}| boolean - true if that user is a member; otherwise, false|Checks whether a user is a space's member or not.|
|*isMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userId, }}| boolean - true if that user is a member; otherwise,false|Checks whether a user is a space's member or not.|
|*hasAccessPermission*(Space space, String userId) throws SpaceException|{{space, userId}}|boolean -  true If the user is root or the space's member.|Checks if a user can access a space or not.|
|*hasAccessPermission*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolean - true If the user is root or the space's member|Checks if a user can access a space or not.|
|*hasEditPermission*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true If the user is root or the space's manager|Checks if a user can have the edit permission of a space or not.|
|*hasEditPermission*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolen - true If user is root or the space's manager|Checks if a user can have the edit permission of a space or not.|
|*isInvited*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true if that user is in the invited list; otherwise, false|Checks if a user is in the invited list of a space or not.|
|*isInvited*(String spaceId, String userId) throws SpaceException|{{spaceId, userId}}|boolen - true if the user is in the invited list; otherwise, false|Checks if a user is in the invited list of a space or not.|
|*isPending*(Space space, String userId) throws SpaceException|{{space, userId}}|boolen - true if that user is in the pending list; otherwise, false|Checks if a user is in the pending list of a space or not.|
|*installApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Installs an application to a space.|
|*installApplication*(Space space, String appId) throws SpaceException|{{space, appId}}|void | Installs an application to a space|
|*activateApplication*(Space space, String appId) throws SpaceException|{{space, appId}}| void| Activates an installed application in a space.|
|*activateApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Activates an installed application in a space.|
|*deactivateApplication*(Space space, String appId) throws SpaceException|{{space, appId}}|void |Deactivates an installed application in a space.|
|*deactivateApplication*(String spaceId, String appId) throws SpaceException|{{spaceId, appId}}|void|Deactivates an installed application in a space.|
|*removeApplication*(Space space, String appId, String appName) throws SpaceException|{{space, appId, appName}}| void|Removes an installed application from a space.|
|*removeApplication*(String spaceId, String appId, String appName) throws SpaceException|{{space, appId, appName}}|void|Removes an installed application from a space.|
|*requestJoin*(Space space, String userId) throws SpaceException|{{space, userid}}|  void |Requests a user to join a space, adds that user to the pending list of the space.|
|*requestJoin*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Requests a user to join a space, adds that user to the pending list of the space.|
|*revokeRequestJoin*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Revokes a join request after users request to join a group and is in the pending status.|
|*revokeRequestJoin*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Revokes a request to join a space.|
|*inviteMember*(Space space, String userId) throws SpaceException|{{space, userid}}| void |Invites a userId to become a member of a space.|
|*inviteMember*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Invites a userId to a be member of a space.|
|*revokeInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Revokes an invitation. Removes a user from the invited  member list of the space.|
|*revokeInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Revokes an invitation. Removes a user from the invited  member list of the space.|
|*acceptInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Accepts an invitation and moves a user from the invited list to the member list.|
|*acceptInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Accepts an invitation and moves a user from the invited list to the member list.|
|*denyInvitation*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Denies an invitation and removes a user from the invited list.|
|*denyInvitation*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Denies an invitation and removes a user from the invited list.|
|*validateRequest*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Validates a request and moves a user from the pending list to the member list.|
|*validateRequest*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Validates a request and moves a user from the pending list to the member list.|
|*declineRequest*(Space space, String userId) throws SpaceException|{{space, userid}}|void|Declines a request and removes a user from  the pending list.|
|*declineRequest*(String spaceId, String userId) throws SpaceException|{{spaceId, userid}}|void|Declines a request and removes a user from  the pending list.|
|*registerSpaceLifeCycleListener*(SpaceLifeCycleListener listener|{{listener}}|void|Registers a space lifecycle listener.|
|*unregisterSpaceLifeCycleListener*(SpaceLifeCycleListener listener)|{{listener}}|void|Unregisters a space lifecycle listener.|
|*setPortletsPrefsRequired*(PortletPreferenceRequiredPlugin portletPrefsRequiredPlugin)|{{portletPrefsRequiredPlugin}}|void| Sets the portlet preferences got from the plug-in configuration.|
|*getPortletsPrefsRequired*()|{{N/A}}|String|Gets the portlet preferences required to use in creating the portlet application.|



