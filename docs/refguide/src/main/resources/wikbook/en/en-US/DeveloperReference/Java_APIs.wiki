h1. Activity Manager

|| Function || Param || Return || Description ||
| *getActivity*(java.lang.String activityId) | {{activityId}} is id of activity | the activity | To get the activity by activity id. |
| *deleteActivity*(java.lang.String activityId) | {{activityId}} is the id of activity |  | To delete activity by id. |
| *deleteComment*(java.lang.String activityId, java.lang.String commentId) | {{activityId}} is the id of activity; {{commentId}} is the id of comment |  | To delete comment by id. |
| *getActivities*(Identity identity) | {{identity}} | activities |  |
| *getActivities*(Identity identity, long start, long limit) | {{identity}}; {{start}} is the offset index ; {{limit}} | activities |  To get the latest activities by identity, specifying the start offset index and limit. |
| *saveActivity*(Identity owner, Activity activity) | {{owner}} is the owner of activity stream; {{activity}} is the activity which needs to be saved |activity saved | To save an activity to the stream of a owner. Note that the Activity.userId will be set to the owner identity if not already set. |
| *saveActivity*(Activity activity) | {{activity}} is the activity which needs to be saved | activity | To save the activity into the stream for the activity's userId. |
| *saveComment*(Activity activity, Activity comment) | {{activity}}; {{comment}} |  | To save new or update comments to an activity comment which is an instance of Activity with mandatory properties: userId, title. |
| *saveLike*(Activity activity, Identity identity) | {{activity}}; {{identity}} |  | To save an identity of user who likes the activity. |
| *removeLike*(Activity activity, Identity identity) | {{activity}}; {{identity}} is the identity of user who unlikes the activity |  | To remove the like activity, if this activity liked, remove; else does nothing. |
| *getComments*(Activity activity) | {{activity}} | comments | To get an activity's commentList. |
| *recordActivity*(Identity owner, java.lang.String type, java.lang.String title, java.lang.String body) | {{owner}} - the owner of the target stream for this activity; {{type}} is the type of activity (freeform); {{title}}; {{body}}| stored activity | To record an activity. |
| *recordActivity*(Identity owner, Activity activity) | {{owner}}; {{activity}} | stored activity | To save an activity. |
| *addProcessor*(ActivityProcessor processor, Adds a new processor}} | {{processor}}; {{addProcessorPlugin}} |  |  |
| *addProcessorPlugin*(BaseActivityProcessorPlugin plugin) | {{plugin}} |  | To add a new processor plug-in. |
| *getActivitiesCount*(Identity owner) |  |  |  |
| *getActivitiesOfConnections*(Identity ownerIdentity)| {{ownerIdentity}}| List<Activity> | Gets activities of connections from an identity which is sorted by time.|
| *getActivitiesOfUserSpaces*(Identity ownerIdentity)| {{ownerIdentity}} | List<Activity> | Gets the activities from all user's spaces which is sorted by time.|
| *getActivityFeed*(Identity ownerIdentity)| {{ownerIdentity}} | List<Activity> | Gets the activity feed of an identity. This feed is the combination of all the activities of his own activities, his connections' activities and his spaces' activities which is sorted by time. The latest activity is the first item in the activity list.|

h1. IdentityManager

|| Function || Param || Return || Description ||
| *getIdentity*(java.lang.String id) | {{id}} can be a social GlobalId or a raw identity such as in Identity.getId() | null if nothing is found, or the Identity object | To get the identity by id and to load his profile. |
| *getIdentity*(java.lang.String id, boolean loadProfile) | {{id}} can be a social GlobalId or a raw identity such as in Identity.getId(); {{loadProfile}} - the value is true if the profile is loaded and false if not loaded | null if nothing is found, or the Identity object | To get the identity by loading id of the profile optionally. |
| *addIdentityProvider*(IdentityProvider<?> idProvider)| {{idProvider}} is the id of provider |  | To add the id of provider. |
| *getOrCreateIdentity*(java.lang.String providerId, java.lang.String remoteId) | {{providerId}} is the id of provider; {{remoteId}} is the remote id | identity | To get the identity by remoteId. If the provider can not find any identity by remoteId, the return value is null. If no identity found by identity provider and that identity is still stored on JCR, that stored identity will be deleted and the return value is null.|
| *getIdentitiesByProfileFilter*(java.lang.String providerId, ProfileFilter profileFilter) | {{providerId}} is the id of provider; {{profileFilter}} is the filter of provider | the identities by the profile filter | To get the identities by profile filter. |
| *getIdentitiesByProfileFilter*(java.lang.String providerId, ProfileFilter profileFilter, long offset, long limit) |  |  |  |
| *getIdentitiesByProfileFilter*(ProfileFilter profileFilter) | {{profileFilter}} - the profile filter | the identities by profile filter | To get the identities by profile filter. |
| *getIdentitiesByProfileFilter*(ProfileFilter profileFilter, long offset, long limit) |  |  |  |
| *getIdentitiesFilterByAlphaBet*(java.lang.String providerId, ProfileFilter profileFilter) | {{providerId}} is the id of provider; {{profileFilter}} is the profile filter | the identities filter by alphabet | To get the identities filter by alpha bet. |
| *getIdentitiesFilterByAlphaBet*(ProfileFilter profileFilter) | {{profileFilter}} - the profile filter | the identities filter by alphabet | To get the identities filter by alphabet. |
| *getOrCreateIdentity*(java.lang.String providerId, java.lang.String remoteId, boolean loadProfile) | {{providerId}} - referring to the name of the Identity provider; {{remoteId}} - the identifier that identify the identity in the specific identity provider; {{loadProfile}} is true when the profile is loaded | null if nothing is found, or the Identity object TODO improves the performance by specifying what needs to be loaded | This function returns an Identity object that is specific to a special type. For example, if the type is Linked'In, the identifier will be the URL of profile or if it is a CS contact manager contact, it will be the UID of the contact. A new identity is created if it doesnot exist. |
| *getIdentity*(java.lang.String providerId, java.lang.String remoteId, boolean loadProfile) | {{providerId}}; {{remoteId}}; {{loadProfile}} |  | To get the identity. |
| *identityExisted*(java.lang.String providerId, java.lang.String remoteId) | {{providerId}}; {{remoteId}} |  | To check if the identity has existed or not. |
| *saveIdentity*(Identity identity) | {{identity}} is the identity |  | To save the identity. |
| *updateAvatar*(Profile p) |  |  |  |
| *updateBasicInfo*(Profile p) |  |  |  |
| *updateContactSection*(Profile p) |  |  |  |
| *updateExperienceSection*(Profile p) |  |  |  |
| *updateHeaderSection*(Profile p) |  |  |  |
| *getIdentities*(java.lang.String providerId) | {{providerId}} is the id of provider | identities | To get the identity. |
| *getIdentities*(java.lang.String providerId, boolean loadProfile) | {{providerId}} is the id of provider; {{loadProfile}} is the loaded profile. |identities | To get the identities. |
| *getStorage*() |  |  | the storage | To get the storage. |
| *setIdentityStorage*(IdentityStorage identityStorage)registerProfileListener |  |  |  |
| *registerProfileListener*(ProfileListener listener)unregisterProfileListener |  |  |  |
| *unregisterProfileListener*(ProfileListener listener)addProfileListener |  |  |  |
| *addProfileListener*(ProfileListenerPlugin plugin) | {{plugin}} |  | To register a profile listener component plug-in. |
| *getIdentityStorage*() |  |  |  |
| *getConnections*(Identity ownerIdentity)| {{ownerIdentity}} | List<Identity> | Gets connections of an identity |


h1. Relationship Manager

|| Function || Param || Return || Description ||
| *getRelationship*(String relationshipId)| {{relationshipId}} | Relationship | Gets relationship the by id. |
| *invite*(Identity sender, Identity receiver)| {{sender}} {{receiver}} | Relationship | Creates a connection invitation between 2 identities. |
| *saveRelationship*(Relationship relationship)| {{relationship}}  is a relationship |  | Saves a relationship. |
| *confirm*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Confirms a relationship. |
| *deny*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Denies a relationship. |
| *remove*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Removes a relationship. |
| *ignore*(Relationship relationship)| {{relationship}}  is a pending relationship |  | Ignores a relationship. |
| *getPendingRelationships*(Identity sender)| {{sender}}  is a identity | List<Relationship> | Gets all the pending relationship of sender. |
| *getPendingRelationships*(Identity sender, List<Identity> identities)| {{sender}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets pending relationships of sender that match with identities. |
| *getRequireValidationRelationships*(Identity receiver)| {{receiver}}  is a identity | List<Relationship> | Gets list of required validation relationship of receiver. |
| *getRequireValidationRelationships*(Identity receiver, List<Identity> identities)| {{receiver}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets list of required validation relationship of receiver that match with identities. |
| *getConfirmedRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Gets list of confirmed relationship of identity. |
| *getConfirmedRelationships*(Identity identity, List<Identity> identities)| {{identity}} is a identity, {{identities}} is a list of identity | List<Relationship> | Gets list of confirmed relationship of identity that match with identities. |
| *getAllRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Returns all the relationship of a given identity with other identity. |
| *getAllRelationships*(Identity identity, List<Identity> identities)| {{identity}} is a identity, {{identities}} is a list of identity | List<Relationship> | Returns all the relationship of a given identity with other identity in identities. |
| *getAllRelationships*(Identity identity)| {{identity}}  is a identity | List<Relationship> | Returns all the relationship of a given identity with other identity. || *getAllRelationships*(Identity identity, Relationship.Type type, List<Identity> identities)| {{identity}} is a identity, {{type}} is a Relationship.Type {{identities}} is a list of identity | List<Relationship> | Returns all the  relationship of a given identity with other identity in identities in type. |
| *getRelationship*(Identity identity1, Identity identity2)| {{identity1}} and {{identity2}} is identities| Relationship | Gets the relationship of 2 identity. |
